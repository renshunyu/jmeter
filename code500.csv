"package io.github.ljwlgl.fileutil;\n\nimport com.alibaba.fastjson.*;\nimport com.alibaba.fastjson.serializer.PropertyFilter;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.math.BigDecimal;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.stream.Collectors;\n\n\npublic class FastJsonUtil {\n    /**\n     * .........Json\n     */\n    public static String toJsonString(Object object) {\n        return JSON.toJSONString(object);\n    }\n\n    /**\n     * .........Json...remove schema ......\n     *\n     * @param object\n     * @return\n     */\n    public static String toStringNoSchema(Object object) {\n        return toJsonString(object, \"schema\");\n    }\n\n    /**\n     * .........Json...........................\n     *\n     * @param object\n     * @param reAttrs\n     * @return String\n     */\n    public static String toJsonString(Object object, String... reAttrs) {\n        List<String> reAttrList = Arrays.stream(reAttrs).filter(Objects::nonNull).collect(Collectors.toList());\n        PropertyFilter filter = (obj, name, value) -> !reAttrList.contains(name);\n        return JSON.toJSONString(object, filter);\n    }\n\n    public static String paramToString(Object object) {\n        return toJsonString(object, \"schema\");\n    }\n\n\n    /**\n     * ......path...json..................\n     * ..................JSONObject......\n     *\n     * @param json  ...json...\n     * @param path  .....................\n     * @param value ...............\n     * @return ...json...\n     */\n    public static String put(String json, String path, Object value) {\n        if (StringUtils.isEmpty(path) || value == null) {\n            return json;\n        }\n        String[] keys = null;\n        if (path.contains(\".\")) {\n            keys = path.split(\"\\\\.\");\n        } else {\n            keys = new String[]{path};\n        }\n        JSONObject preObject = parseObject(json);\n        JSONObject object = getJSONObjectByKeys(preObject, keys);\n        if (object == null) {\n            return json;\n        }\n        object.put(keys[keys.length - 1], value);\n        return toJsonString(preObject);\n    }\n\n    /**\n     * ......path..................\n     *\n     * @param json ...json...\n     * @param path ...............json......\n     * @return ......json...\n     */\n    public static String remove(String json, String path) {\n        if (StringUtils.isEmpty(path)) {\n            return json;\n        }\n        String[] keys = null;\n        if (path.contains(\".\")) {\n            keys = path.split(\"\\\\.\");\n        } else {\n            keys = new String[]{path};\n        }\n        JSONObject preObject = parseObject(json);\n        JSONObject object = getJSONObjectByKeys(preObject, keys);\n        if (object == null) {\n            return json;\n        }\n        object.remove(keys[keys.length - 1]);\n        return toJsonString(preObject);\n    }\n\n    /**\n     * ......path.................., .........JSONObject\n     *\n     * @param json ...json...\n     * @param path ...............json......\n     * @return ......json...\n     */\n    "{=)(=}"\n\n    /**\n     * ......path.................., ......JSONArray.................................\n     *\n     * @param json ...json...\n     * @param path ...............json......\n     * @return ......json...\n     */\n    public static String replaceNew(String json, String path, String value) {\n        if (StringUtils.isEmpty(path)) {\n            return json;\n        }\n        String[] keys = null;\n        if (path.contains(\".\")) {\n            keys = path.split(\"\\\\.\");\n        } else {\n            keys = new String[]{path};\n        }\n        List<JSONObject> res = new ArrayList<>();\n        JSONObject preObject = parseObject(json);\n        getJSONObjectByKeys(res, preObject, keys, 1);\n        if (CollectionUtils.isEmpty(res)) {\n            return json;\n        }\n        for (int j = 0; j < res.size(); j++) {\n            Object oldValue = res.get(j).get(keys[keys.length - 1]);\n            if (oldValue == null) {\n                continue;\n            }\n            res.get(j).replace(keys[keys.length - 1], String.valueOf(value));\n        }\n        return toJsonString(preObject);\n    }\n\n    private static JSONObject getJSONObjectByKeys(JSONObject preObject, String[] keys) {\n        JSONObject object = preObject;\n        for (int i = keys[0].equals(\"$\") ? 1 : 0; i < keys.length - 1; i++) {\n            if (object != null) {\n                object = object.getJSONObject(keys[i]);\n            }\n        }\n        return object;\n    }\n\n    // ......JSONArray\n    private static void getJSONObjectByKeys(List<JSONObject> res, Object object, String[] keys, int index) {\n        if (object == null || index >= keys.length) {\n            return;\n        }\n        if (object instanceof JSONArray) {\n            JSONArray array = (JSONArray) object;\n            for (int i = 0; i < array.size(); i++) {\n                getJSONObjectByKeys(res, array.get(i), keys, index);\n            }\n            return;\n        } else if (object instanceof JSONObject) {\n            JSONObject obj = (JSONObject) object;\n            if (index < keys.length - 1) {\n                getJSONObjectByKeys(res, obj.get(keys[index]), keys, index + 1);\n                return;\n            }\n            res.add((JSONObject) object);\n        }\n    }\n\n\n    public static JSONObject encryptJson(JSONObject jsonObject, List<String> paths) {\n        if (jsonObject == null || CollectionUtils.isEmpty(paths)) {\n            return jsonObject;\n        }\n        try {\n            return encryptToObject(jsonObject, paths.toArray(new String[paths.size()]));\n        } catch (Exception ex) {\n            throw ex;\n        }\n    }\n\n    public static String encryptJson(String json, List<String> paths) {\n        if (StringUtils.isBlank(json) || CollectionUtils.isEmpty(paths)) {\n            return json;\n        }\n        JSONObject preObject = parseObject(json);\n        try {\n            return encryptToJson(preObject, paths.toArray(new String[paths.size()]));\n        } catch (Exception ex) {\n            throw ex;\n        }\n    }\n\n    /**\n     * ......json.........JsonArray\n     *\n     * @param preObject ...json...\n     * @param paths     ...............json......\n     * @return ......json...\n     */\n    private static String encryptToJson(JSONObject preObject, String[] paths) {\n        return toJsonString(encryptToObject(preObject, paths));\n    }\n\n    private static JSONObject encryptToObject(JSONObject preObject, String[] paths) {\n        for (int i = 0; i < paths.length; i++) {\n            if (StringUtils.isEmpty(paths[i])) {\n                continue;\n            }\n            String[] keys = null;\n            if (paths[i].contains(\".\")) {\n            } else {\n                keys = new String[]{paths[i]};\n            }\n            List<JSONObject> res = new ArrayList<>();\n            getJSONObjectByKeys(res, preObject, keys, 1);\n            if (CollectionUtils.isEmpty(res)) {\n                continue;\n            }\n            for (int j = 0; j < res.size(); j++) {\n                Object oldValue = res.get(j).get(keys[keys.length - 1]);\n                if (oldValue == null) {\n                    continue;\n                }\n                res.get(j).replace(keys[keys.length - 1], encryptText(String.valueOf(oldValue)));\n            }\n        }\n        return preObject;\n    }\n\n    private static String encryptText(String text) {\n        if (StringUtils.isBlank(text)) {\n            return text;\n        }\n        // ..............................0.36\n        int passLength = (int) Math.ceil(text.length() * 0.36);\n        int midIdx = text.length() / 2;\n        char[] arr = text.toCharArray();\n        arr[midIdx] = '*';\n        for (int i = 1, p = 1, k = 1; i < passLength; i++) {\n            if (i % 2 == 0) {\n                arr[midIdx + p] = '*';\n                p++;\n            } else {\n                arr[midIdx - k] = '*';\n                k++;\n            }\n        }\n        return String.valueOf(arr);\n    }\n\n    /**\n     * ......path............\n     *\n     * @param json\n     * @param path\n     * @return String\n     */\n    public static Object eval(String json, String path) {\n        try {\n            if (!json.contains(\"{\") || !json.contains(\"}\")) {\n                return null;\n            }\n            JSONObject jsonObject = JSON.parseObject(json);\n            return JSONPath.eval(jsonObject, path);\n        } catch (Exception ex) {\n            return null;\n        }\n    }\n\n    public static Object eval(JSONObject jsonObject, String path) {\n        try {\n            return JSONPath.eval(jsonObject, path);\n        } catch (Exception ex) {\n            return null;\n        }\n    }\n\n    /**\n     * ......path...json..............................JavaBean\n     *\n     * @param json json.........\n     * @param path .........json......\n     * @param clz  class\n     * @param <T>  ............\n     * @return res\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T eval(String json, String path, Class<T> clz) {\n        Object obj = eval(json, path);\n        if (obj == null) {\n            return null;\n        }\n        return instanceOf(obj, clz);\n    }\n\n    public static <T> T eval(JSONObject jsonObject, String path, Class<T> clz) {\n        Object obj = eval(jsonObject, path);\n        if (obj == null) {\n            return null;\n        }\n        return instanceOf(obj, clz);\n    }\n\n    private static <T> T instanceOf(Object obj, Class<T> clz) {\n        if (obj instanceof String) {\n            return valueOf(obj, clz);\n        } else if (obj instanceof Integer) {\n            return valueOf(obj, clz);\n        } else if (obj instanceof Long) {\n            return valueOf(obj, clz);\n        } else if (obj instanceof BigDecimal) {\n            return valueOf(obj, clz);\n        } else if (obj instanceof JSONObject) {\n            return JSONObject.parseObject(JSON.toJSONString(obj), clz);\n        } else if (obj instanceof JSONArray) {\n            return valueOf(obj, clz);\n        } else {\n            return null;\n        }\n    }\n\n    private static <T> T valueOf(Object obj, Class<T> clz) {\n        if (clz.equals(Long.class)) {\n            return (T) Long.valueOf(obj.toString());\n        } else if (clz.equals(Integer.class)) {\n            return (T) Integer.valueOf(obj.toString());\n        } else if (clz.equals(String.class)) {\n            return (T) obj.toString();\n        } else if (clz.equals(Boolean.class)) {\n            return (T) Boolean.valueOf(obj.toString());\n        } else if (clz.equals(Double.class)) {\n            return (T) Double.valueOf(obj.toString());\n        } else if (clz.equals(Float.class)) {\n            return (T) Float.valueOf(obj.toString());\n        } else if (clz.equals(BigDecimal.class)) {\n            return (T) BigDecimal.valueOf(Double.valueOf(obj.toString()));\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * ......path...json..............................JavaBean.....................array\n     *\n     * @param json json.........\n     * @param path .........json......\n     * @param clz  class\n     * @param <T>  ............\n     * @return res\n     */\n    public static <T> List<T> evals(String json, String path, Class<T> clz) {\n        Object obj = eval(json, path);\n        if (obj == null) {\n            return null;\n        }\n        if (obj instanceof JSONArray) {\n            return JSONArray.parseArray(JSON.toJSONString(obj), clz);\n        }\n        return null;\n    }\n\n    /**\n     * ............Json\n     */\n    public static <T> T parseObject(String json, Class<T> clazz) {\n        return JSON.parseObject(json, clazz);\n    }\n\n    public static JSONObject parseObject(String json) {\n        return JSON.parseObject(json);\n    }\n\n    public static Object parse(String text) {\n        return JSON.parse(text);\n    }\n\n    /**\n     * ...............List\n     */\n    public static <T> List<T> parseArray(String json, Class<T> clazz) {\n        return JSON.parseArray(json, clazz);\n    }\n\n    /**\n     * ......Json........................\n     */\n    public static String getJsonValue(String jsonStr, String key) {\n        if (StringUtils.isEmpty(jsonStr) || StringUtils.isEmpty(key)) {\n            return null;\n        }\n        JSONObject object = JSONObject.parseObject(jsonStr);\n        return object.getString(key);\n    }\n\n    public static boolean containsKey(String jsonStr, String key) {\n        boolean result = false;\n        if (StringUtils.isEmpty(jsonStr) || StringUtils.isEmpty(key)) {\n            return result;\n        }\n        try {\n            JSONObject object = JSONObject.parseObject(jsonStr);\n            result = object.containsKey(key);\n        } catch (Exception ex) {\n            result = false;\n        }\n        return result;\n    }\n\n    /**\n     * ......Json............keys......\n     *\n     * @param jsonStr json\n     * @param keys    ........................\n     * @return boolean\n     */\n    public static boolean containsKey(String jsonStr, String... keys) {\n        if (StringUtils.isEmpty(jsonStr) || keys == null || keys.length == 0) {\n            return false;\n        }\n        JSONObject object = JSONObject.parseObject(jsonStr);\n        return containsKey(object, keys);\n    }\n\n    public static boolean containsKey(JSONObject jsonObject, String... keys) {\n        if (jsonObject == null || keys == null || keys.length == 0) {\n            return false;\n        }\n        try {\n            for (int i = 0; i < keys.length; i++) {\n                if (!jsonObject.containsKey(keys[i])) {\n                    return false;\n                }\n            }\n        } catch (Exception ex) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * ...............Json...\n     *\n     * @param str ...............\n     * @return bool\n     */\n    public static boolean isJSON(String str) {\n\n        if (StringUtils.isBlank(str)) {\n            return false;\n        }\n\n        boolean result;\n\n        try {\n            JSON.parse(str);\n            result = true;\n        } catch (JSONException e) {\n            result = false;\n        }\n        return result;\n    }\n\n}\n"{=)(=}C%3A%2FUsers%2FEDY%2FIdeaProjects%2FCommonUtil-master