"/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.catalina.filters;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Set;\n\nimport jakarta.servlet.FilterChain;\nimport jakarta.servlet.GenericFilter;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.ServletRequest;\nimport jakarta.servlet.ServletResponse;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\n\nimport org.apache.juli.logging.Log;\nimport org.apache.juli.logging.LogFactory;\nimport org.apache.tomcat.util.http.RequestUtil;\nimport org.apache.tomcat.util.http.ResponseUtil;\nimport org.apache.tomcat.util.res.StringManager;\n\n/**\n * <p>\n * A {@link jakarta.servlet.Filter} that enable client-side cross-origin requests by implementing W3C's CORS\n * (<b>C</b>ross-<b>O</b>rigin <b>R</b>esource <b>S</b>haring) specification for resources. Each\n * {@link HttpServletRequest} request is inspected as per specification, and appropriate response headers are added to\n * {@link HttpServletResponse}.\n * </p>\n * <p>\n * By default, it also sets following request attributes, that help to determine the nature of the request downstream.\n * </p>\n * <ul>\n * <li><b>cors.isCorsRequest:</b> Flag to determine if the request is a CORS request. Set to <code>true</code> if a CORS\n * request; <code>false</code> otherwise.</li>\n * <li><b>cors.request.origin:</b> The Origin URL, i.e. the URL of the page from where the request is originated.</li>\n * <li><b>cors.request.type:</b> Type of request. Possible values:\n * <ul>\n * <li>SIMPLE: A request which is not preceded by a pre-flight request.</li>\n * <li>ACTUAL: A request which is preceded by a pre-flight request.</li>\n * <li>PRE_FLIGHT: A pre-flight request.</li>\n * <li>NOT_CORS: A normal same-origin request.</li>\n * <li>INVALID_CORS: A cross-origin request which is invalid.</li>\n * </ul>\n * </li>\n * <li><b>cors.request.headers:</b> Request headers sent as 'Access-Control-Request-Headers' header, for pre-flight\n * request.</li>\n * </ul>\n * If you extend this class and override one or more of the getXxx() methods, consider whether you also need to override\n * {@link CorsFilter#doFilter(ServletRequest, ServletResponse, FilterChain)} and add appropriate locking so that the\n * {@code doFilter()} method executes with a consistent configuration.\n *\n * @see <a href=\"http://www.w3.org/TR/cors/\">CORS specification</a>\n */\npublic class CorsFilter extends GenericFilter {\n\n    private static final long serialVersionUID = 1L;\n    private static final StringManager sm = StringManager.getManager(CorsFilter.class);\n\n    private transient Log log = LogFactory.getLog(CorsFilter.class); // must not be static\n\n\n    /**\n     * A {@link Collection} of origins consisting of zero or more origins that are allowed access to the resource.\n     */\n    private final Collection<String> allowedOrigins = new HashSet<>();\n\n    /**\n     * Determines if any origin is allowed to make request.\n     */\n    private boolean anyOriginAllowed;\n\n    /**\n     * A {@link Collection} of methods consisting of zero or more methods that are supported by the resource.\n     */\n    private final Collection<String> allowedHttpMethods = new HashSet<>();\n\n    /**\n     * A {@link Collection} of headers consisting of zero or more header field names that are supported by the resource.\n     */\n    private final Collection<String> allowedHttpHeaders = new HashSet<>();\n\n    /**\n     * A {@link Collection} of exposed headers consisting of zero or more header field names of headers other than the\n     * simple response headers that the resource might use and can be exposed.\n     */\n    private final Collection<String> exposedHeaders = new HashSet<>();\n\n    /**\n     * A supports credentials flag that indicates whether the resource supports user credentials in the request. It is\n     * true when the resource does and false otherwise.\n     */\n    private boolean supportsCredentials;\n\n    /**\n     * Indicates (in seconds) how long the results of a pre-flight request can be cached in a pre-flight result cache.\n     */\n    private long preflightMaxAge;\n\n    /**\n     * Determines if the request should be decorated or not.\n     */\n    private boolean decorateRequest;\n\n\n    @Override\n    public void doFilter(final ServletRequest servletRequest, final ServletResponse servletResponse,\n            final FilterChain filterChain) throws IOException, ServletException {\n        if (!(servletRequest instanceof HttpServletRequest) || !(servletResponse instanceof HttpServletResponse)) {\n            throw new ServletException(sm.getString(\"corsFilter.onlyHttp\"));\n        }\n\n        // Safe to downcast at this point.\n        HttpServletRequest request = (HttpServletRequest) servletRequest;\n        HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n        // Determines the CORS request type.\n        CorsFilter.CORSRequestType requestType = checkRequestType(request);\n\n        // Adds CORS specific attributes to request.\n        if (isDecorateRequest()) {\n            decorateCORSProperties(request, requestType);\n        }\n        switch (requestType) {\n            case SIMPLE:\n                // Handles a Simple CORS request.\n            case ACTUAL:\n                // Handles an Actual CORS request.\n                this.handleSimpleCORS(request, response, filterChain);\n                break;\n            case PRE_FLIGHT:\n                // Handles a Pre-flight CORS request.\n                this.handlePreflightCORS(request, response, filterChain);\n                break;\n            case NOT_CORS:\n                // Handles a Normal request that is not a cross-origin request.\n                this.handleNonCORS(request, response, filterChain);\n                break;\n            default:\n                // Handles a CORS request that violates specification.\n                this.handleInvalidCORS(request, response, filterChain);\n                break;\n        }\n    }\n\n\n    @Override\n    public void init() throws ServletException {\n        parseAndStore(getInitParameter(PARAM_CORS_ALLOWED_ORIGINS, DEFAULT_ALLOWED_ORIGINS),\n                getInitParameter(PARAM_CORS_ALLOWED_METHODS, DEFAULT_ALLOWED_HTTP_METHODS),\n                getInitParameter(PARAM_CORS_ALLOWED_HEADERS, DEFAULT_ALLOWED_HTTP_HEADERS),\n                getInitParameter(PARAM_CORS_EXPOSED_HEADERS, DEFAULT_EXPOSED_HEADERS),\n                getInitParameter(PARAM_CORS_SUPPORT_CREDENTIALS, DEFAULT_SUPPORTS_CREDENTIALS),\n                getInitParameter(PARAM_CORS_PREFLIGHT_MAXAGE, DEFAULT_PREFLIGHT_MAXAGE),\n                getInitParameter(PARAM_CORS_REQUEST_DECORATE, DEFAULT_DECORATE_REQUEST));\n    }\n\n\n    /**\n     * This method returns the parameter's value if it exists, or defaultValue if not.\n     *\n     * @param name         The parameter's name\n     * @param defaultValue The default value to return if the parameter does not exist\n     *\n     * @return The parameter's value or the default value if the parameter does not exist\n     */\n    private String getInitParameter(String name, String defaultValue) {\n\n        String value = getInitParameter(name);\n        if (value != null) {\n            return value;\n        }\n\n        return defaultValue;\n    }\n\n\n    /**\n     * Handles a CORS request of type {@link CORSRequestType}.SIMPLE.\n     *\n     * @param request     The {@link HttpServletRequest} object.\n     * @param response    The {@link HttpServletResponse} object.\n     * @param filterChain The {@link FilterChain} object.\n     *\n     * @throws IOException      an IO error occurred\n     * @throws ServletException Servlet error propagation\n     *\n     * @see <a href=\"http://www.w3.org/TR/cors/#resource-requests\">Simple Cross-Origin Request, Actual Request, and\n     *          Redirects</a>\n     */\n    protected void handleSimpleCORS(final HttpServletRequest request, final HttpServletResponse response,\n                                    final FilterChain filterChain) throws IOException, ServletException {\n\n        CorsFilter.CORSRequestType requestType = checkRequestType(request);\n        if (!(requestType == CorsFilter.CORSRequestType.SIMPLE || requestType == CorsFilter.CORSRequestType.ACTUAL)) {\n            throw new IllegalArgumentException(sm.getString(\"corsFilter.wrongType2\", CorsFilter.CORSRequestType.SIMPLE,\n                CorsFilter.CORSRequestType.ACTUAL));\n        }\n\n        final String origin = request.getHeader(REQUEST_HEADER_ORIGIN);\n        final String method = request.getMethod();\n\n        // Section 6.1.2\n        if (!isOriginAllowed(origin)) {\n            handleInvalidCORS(request, response, filterChain);\n            return;\n        }\n\n        if (!getAllowedHttpMethods().contains(method)) {\n            handleInvalidCORS(request, response, filterChain);\n            return;\n        }\n\n        addStandardHeaders(request, response);\n\n        // Forward the request down the filter chain.\n        filterChain.doFilter(request, response);\n    }\n\n\n    /**\n     * Handles CORS pre-flight request.\n     *\n     * @param request     The {@link HttpServletRequest} object.\n     * @param response    The {@link HttpServletResponse} object.\n     * @param filterChain The {@link FilterChain} object.\n     *\n     * @throws IOException      an IO error occurred\n     * @throws ServletException Servlet error propagation\n     */\n    protected void handlePreflightCORS(final HttpServletRequest request, final HttpServletResponse response,\n            final FilterChain filterChain) throws IOException, ServletException {\n\n        CORSRequestType requestType = checkRequestType(request);\n        if (requestType != CORSRequestType.PRE_FLIGHT) {\n            throw new IllegalArgumentException(sm.getString(\"corsFilter.wrongType1\",\n                    CORSRequestType.PRE_FLIGHT.name().toLowerCase(Locale.ENGLISH)));\n        }\n\n        final String origin = request.getHeader(REQUEST_HEADER_ORIGIN);\n\n        // Section 6.2.2\n        if (!isOriginAllowed(origin)) {\n            handleInvalidCORS(request, response, filterChain);\n            return;\n        }\n\n        // Section 6.2.3\n        String accessControlRequestMethod = request.getHeader(REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD);\n        if (accessControlRequestMethod == null) {\n            handleInvalidCORS(request, response, filterChain);\n            return;\n        } else {\n            accessControlRequestMethod = accessControlRequestMethod.trim();\n        }\n\n        // Section 6.2.4\n        String accessControlRequestHeadersHeader = request.getHeader(REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS);\n        List<String> accessControlRequestHeaders = new ArrayList<>();\n        if (accessControlRequestHeadersHeader != null && !accessControlRequestHeadersHeader.trim().isEmpty()) {\n            String[] headers = accessControlRequestHeadersHeader.trim().split(\",\");\n            for (String header : headers) {\n                accessControlRequestHeaders.add(header.trim().toLowerCase(Locale.ENGLISH));\n            }\n        }\n\n        // Section 6.2.5\n        if (!getAllowedHttpMethods().contains(accessControlRequestMethod)) {\n            handleInvalidCORS(request, response, filterChain);\n            return;\n        }\n\n        // Section 6.2.6\n        if (!accessControlRequestHeaders.isEmpty()) {\n            for (String header : accessControlRequestHeaders) {\n                if (!getAllowedHttpHeaders().contains(header)) {\n                    handleInvalidCORS(request, response, filterChain);\n                    return;\n                }\n            }\n        }\n\n        addStandardHeaders(request, response);\n\n        // Do not forward the request down the filter chain.\n    }\n\n\n    /**\n     * Handles a request, that's not a CORS request, but is a valid request i.e. it is not a cross-origin request. This\n     * implementation, just forwards the request down the filter chain.\n     *\n     * @param request     The {@link HttpServletRequest} object.\n     * @param response    The {@link HttpServletResponse} object.\n     * @param filterChain The {@link FilterChain} object.\n     *\n     * @throws IOException      an IO error occurred\n     * @throws ServletException Servlet error propagation\n     */\n    private void handleNonCORS(final HttpServletRequest request, final HttpServletResponse response,\n                               final FilterChain filterChain) throws IOException, ServletException {\n\n        if (!isAnyOriginAllowed()) {\n            // If only specific origins are allowed, the response will vary by\n            // origin\n            ResponseUtil.addVaryFieldName(response, REQUEST_HEADER_ORIGIN);\n        }\n\n        // Let request pass.\n        filterChain.doFilter(request, response);\n    }\n\n\n    /**\n     * Handles a CORS request that violates specification.\n     *\n     * @param request     The {@link HttpServletRequest} object.\n     * @param response    The {@link HttpServletResponse} object.\n     * @param filterChain The {@link FilterChain} object.\n     */\n    private void handleInvalidCORS(final HttpServletRequest request, final HttpServletResponse response,\n            final FilterChain filterChain) {\n        String origin = request.getHeader(REQUEST_HEADER_ORIGIN);\n        String method = request.getMethod();\n        String accessControlRequestHeaders = request.getHeader(REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS);\n\n        response.setContentType(\"text/plain\");\n        response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n        response.resetBuffer();\n\n        if (log.isDebugEnabled()) {\n            // Debug so no need for i18n\n            StringBuilder message = new StringBuilder(\"Invalid CORS request; Origin=\");\n            message.append(origin);\n            message.append(\";Method=\");\n            message.append(method);\n            if (accessControlRequestHeaders != null) {\n                message.append(\";Access-Control-Request-Headers=\");\n                message.append(accessControlRequestHeaders);\n            }\n            log.debug(message.toString());\n        }\n    }\n\n\n    /*\n     * Sets a standard set of headers to reduce response variation which in turn is intended to aid caching.\n     */\n    private void addStandardHeaders(final HttpServletRequest request, final HttpServletResponse response) {\n\n        final String method = request.getMethod();\n        final String origin = request.getHeader(REQUEST_HEADER_ORIGIN);\n\n        // Local copy to avoid concurrency issues if isAnyOriginAllowed()\n        // is overridden.\n        boolean anyOriginAllowed = isAnyOriginAllowed();\n        if (!anyOriginAllowed) {\n            // If only specific origins are allowed, the response will vary by\n            // origin\n            ResponseUtil.addVaryFieldName(response, REQUEST_HEADER_ORIGIN);\n        }\n\n        // CORS requests (SIMPLE, ACTUAL, PRE_FLIGHT) set the following headers\n        // although non-CORS requests do not need to. The headers are always set\n        // as a) they do no harm in the non-CORS case and b) it allows the same\n        // response to be cached for CORS and non-CORS requests.\n\n        // Add a single Access-Control-Allow-Origin header.\n        if (anyOriginAllowed) {\n            // If any origin is allowed, return header with '*'.\n            response.addHeader(RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN, \"*\");\n        } else {\n            // Add a single Access-Control-Allow-Origin header, with the value\n            // of the Origin header as value.\n            response.addHeader(RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN, origin);\n        }\n\n        // If the resource supports credentials, add a single\n        // Access-Control-Allow-Credentials header with the case-sensitive\n        // string \"true\" as value.\n        if (isSupportsCredentials()) {\n            response.addHeader(RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_CREDENTIALS, \"true\");\n        }\n\n        // If the list of exposed headers is not empty add one or more\n        // Access-Control-Expose-Headers headers, with as values the header\n        // field names given in the list of exposed headers.\n        // Local copy to avoid concurrency issues if getExposedHeaders()\n        // is overridden.\n        Collection<String> exposedHeaders = getExposedHeaders();\n        if (exposedHeaders != null && exposedHeaders.size() > 0) {\n            String exposedHeadersString = join(exposedHeaders, \",\");\n            response.addHeader(RESPONSE_HEADER_ACCESS_CONTROL_EXPOSE_HEADERS, exposedHeadersString);\n        }\n\n        if (\"OPTIONS\".equals(method)) {\n            // For an OPTIONS request, the response will vary based on the\n            // value or absence of the following headers. Hence they need be be\n            // included in the Vary header.\n            ResponseUtil.addVaryFieldName(response, REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD);\n            ResponseUtil.addVaryFieldName(response, REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS);\n\n            // CORS PRE_FLIGHT (OPTIONS) requests set the following headers although\n            // non-CORS OPTIONS requests do not need to. The headers are always set\n            // as a) they do no harm in the non-CORS case and b) it allows the same\n            // response to be cached for CORS and non-CORS requests.\n            // Local copy to avoid concurrency issues if getPreflightMaxAge()\n            // is overridden.\n            long preflightMaxAge = getPreflightMaxAge();\n            if (preflightMaxAge > 0) {\n                response.addHeader(RESPONSE_HEADER_ACCESS_CONTROL_MAX_AGE, String.valueOf(preflightMaxAge));\n            }\n\n            // Local copy to avoid concurrency issues if getAllowedHttpMethods()\n            // is overridden.\n            Collection<String> allowedHttpMethods = getAllowedHttpMethods();\n            if (allowedHttpMethods != null && !allowedHttpMethods.isEmpty()) {\n                response.addHeader(RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_METHODS, join(allowedHttpMethods, \",\"));\n            }\n\n            // Local copy to avoid concurrency issues if getAllowedHttpHeaders()\n            // is overridden.\n            Collection<String> allowedHttpHeaders = getAllowedHttpHeaders();\n            if (allowedHttpHeaders != null && !allowedHttpHeaders.isEmpty()) {\n                response.addHeader(RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_HEADERS, join(allowedHttpHeaders, \",\"));\n            }\n        }\n    }\n\n\n    /**\n     * Decorates the {@link HttpServletRequest}, with CORS attributes.\n     * <ul>\n     * <li><b>cors.isCorsRequest:</b> Flag to determine if request is a CORS request. Set to <code>true</code> if CORS\n     * request; <code>false</code> otherwise.</li>\n     * <li><b>cors.request.origin:</b> The Origin URL.</li>\n     * <li><b>cors.request.type:</b> Type of request. Values: <code>simple</code> or <code>preflight</code> or\n     * <code>not_cors</code> or <code>invalid_cors</code></li>\n     * <li><b>cors.request.headers:</b> Request headers sent as 'Access-Control-Request-Headers' header, for pre-flight\n     * request.</li>\n     * </ul>\n     *\n     * @param request         The {@link HttpServletRequest} object.\n     * @param corsRequestType The {@link CORSRequestType} object.\n     */\n    protected static void decorateCORSProperties(final HttpServletRequest request,\n            final CORSRequestType corsRequestType) {\n        if (request == null) {\n            throw new IllegalArgumentException(sm.getString(\"corsFilter.nullRequest\"));\n        }\n\n        if (corsRequestType == null) {\n            throw new IllegalArgumentException(sm.getString(\"corsFilter.nullRequestType\"));\n        }\n\n        switch (corsRequestType) {\n            case SIMPLE:\n            case ACTUAL:\n                request.setAttribute(HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST, Boolean.TRUE);\n                request.setAttribute(HTTP_REQUEST_ATTRIBUTE_ORIGIN, request.getHeader(REQUEST_HEADER_ORIGIN));\n                request.setAttribute(HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE,\n                        corsRequestType.name().toLowerCase(Locale.ENGLISH));\n                break;\n            case PRE_FLIGHT:\n                request.setAttribute(HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST, Boolean.TRUE);\n                request.setAttribute(HTTP_REQUEST_ATTRIBUTE_ORIGIN, request.getHeader(REQUEST_HEADER_ORIGIN));\n                request.setAttribute(HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE,\n                        corsRequestType.name().toLowerCase(Locale.ENGLISH));\n                String headers = request.getHeader(REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS);\n                if (headers == null) {\n                    headers = \"\";\n                }\n                request.setAttribute(HTTP_REQUEST_ATTRIBUTE_REQUEST_HEADERS, headers);\n                break;\n            case NOT_CORS:\n                request.setAttribute(HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST, Boolean.FALSE);\n                break;\n            default:\n                // Don't set any attributes\n                break;\n        }\n    }\n\n\n    /**\n     * Joins elements of {@link Set} into a string, where each element is separated by the provided separator.\n     *\n     * @param elements      The {@link Set} containing elements to join together.\n     * @param joinSeparator The character to be used for separating elements.\n     *\n     * @return The joined {@link String}; <code>null</code> if elements {@link Set} is null.\n     */\n    "{=)(=}"\n\n\n    /**\n     * Determines the request type.\n     *\n     * @param request The HTTP Servlet request\n     *\n     * @return the CORS type\n     */\n    protected CORSRequestType checkRequestType(final HttpServletRequest request) {\n        CORSRequestType requestType = CORSRequestType.INVALID_CORS;\n        if (request == null) {\n            throw new IllegalArgumentException(sm.getString(\"corsFilter.nullRequest\"));\n        }\n        String originHeader = request.getHeader(REQUEST_HEADER_ORIGIN);\n        // Section 6.1.1 and Section 6.2.1\n        if (originHeader != null) {\n            if (originHeader.isEmpty()) {\n                requestType = CORSRequestType.INVALID_CORS;\n            } else if (!RequestUtil.isValidOrigin(originHeader)) {\n                requestType = CORSRequestType.INVALID_CORS;\n            } else if (RequestUtil.isSameOrigin(request, originHeader)) {\n                return CORSRequestType.NOT_CORS;\n            } else {\n                String method = request.getMethod();\n                if (method != null) {\n                    if (\"OPTIONS\".equals(method)) {\n                        String accessControlRequestMethodHeader =\n                                request.getHeader(REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD);\n                        if (accessControlRequestMethodHeader != null && !accessControlRequestMethodHeader.isEmpty()) {\n                            requestType = CORSRequestType.PRE_FLIGHT;\n                        } else if (accessControlRequestMethodHeader != null &&\n                                accessControlRequestMethodHeader.isEmpty()) {\n                            requestType = CORSRequestType.INVALID_CORS;\n                        } else {\n                            requestType = CORSRequestType.ACTUAL;\n                        }\n                    } else if (\"GET\".equals(method) || \"HEAD\".equals(method)) {\n                        requestType = CORSRequestType.SIMPLE;\n                    } else if (\"POST\".equals(method)) {\n                        String mediaType = getMediaType(request.getContentType());\n                        if (mediaType != null) {\n                            if (SIMPLE_HTTP_REQUEST_CONTENT_TYPE_VALUES.contains(mediaType)) {\n                                requestType = CORSRequestType.SIMPLE;\n                            } else {\n                                requestType = CORSRequestType.ACTUAL;\n                            }\n                        }\n                    } else {\n                        requestType = CORSRequestType.ACTUAL;\n                    }\n                }\n            }\n        } else {\n            requestType = CORSRequestType.NOT_CORS;\n        }\n\n        return requestType;\n    }\n\n\n    /**\n     * Return the lower case, trimmed value of the media type from the content type.\n     */\n    private String getMediaType(String contentType) {\n        if (contentType == null) {\n            return null;\n        }\n        String result = contentType.toLowerCase(Locale.ENGLISH);\n        int firstSemiColonIndex = result.indexOf(';');\n        if (firstSemiColonIndex > -1) {\n            result = result.substring(0, firstSemiColonIndex);\n        }\n        result = result.trim();\n        return result;\n    }\n\n    /**\n     * Checks if the Origin is allowed to make a CORS request.\n     *\n     * @param origin The Origin.\n     *\n     * @return <code>true</code> if origin is allowed; <code>false</code> otherwise.\n     */\n    private boolean isOriginAllowed(final String origin) {\n        if (isAnyOriginAllowed()) {\n            return true;\n        }\n\n        // If 'Origin' header is a case-sensitive match of any of allowed\n        // origins, then return true, else return false.\n        return getAllowedOrigins().contains(origin);\n    }\n\n\n    /**\n     * Parses each param-value and populates configuration variables. If a param is provided, it overrides the default.\n     *\n     * @param allowedOrigins      A {@link String} of comma separated origins.\n     * @param allowedHttpMethods  A {@link String} of comma separated HTTP methods.\n     * @param allowedHttpHeaders  A {@link String} of comma separated HTTP headers.\n     * @param exposedHeaders      A {@link String} of comma separated headers that needs to be exposed.\n     * @param supportsCredentials \"true\" if support credentials needs to be enabled.\n     * @param preflightMaxAge     The amount of seconds the user agent is allowed to cache the result of the pre-flight\n     *                                request.\n     *\n     * @throws ServletException If the configuration is invalid\n     */\n    private void parseAndStore(final String allowedOrigins, final String allowedHttpMethods,\n            final String allowedHttpHeaders, final String exposedHeaders, final String supportsCredentials,\n            final String preflightMaxAge, final String decorateRequest) throws ServletException {\n\n        if (allowedOrigins.trim().equals(\"*\")) {\n            this.anyOriginAllowed = true;\n        } else {\n            this.anyOriginAllowed = false;\n            Set<String> setAllowedOrigins = parseStringToSet(allowedOrigins);\n            this.allowedOrigins.clear();\n            this.allowedOrigins.addAll(setAllowedOrigins);\n        }\n\n        Set<String> setAllowedHttpMethods = parseStringToSet(allowedHttpMethods);\n        this.allowedHttpMethods.clear();\n        this.allowedHttpMethods.addAll(setAllowedHttpMethods);\n\n        Set<String> setAllowedHttpHeaders = parseStringToSet(allowedHttpHeaders);\n        Set<String> lowerCaseHeaders = new HashSet<>();\n        for (String header : setAllowedHttpHeaders) {\n            String lowerCase = header.toLowerCase(Locale.ENGLISH);\n            lowerCaseHeaders.add(lowerCase);\n        }\n        this.allowedHttpHeaders.clear();\n        this.allowedHttpHeaders.addAll(lowerCaseHeaders);\n\n        Set<String> setExposedHeaders = parseStringToSet(exposedHeaders);\n        this.exposedHeaders.clear();\n        this.exposedHeaders.addAll(setExposedHeaders);\n\n        // For any value other than 'true' this will be false.\n        this.supportsCredentials = Boolean.parseBoolean(supportsCredentials);\n\n        if (this.supportsCredentials && this.anyOriginAllowed) {\n            throw new ServletException(sm.getString(\"corsFilter.invalidSupportsCredentials\"));\n        }\n\n        try {\n            if (!preflightMaxAge.isEmpty()) {\n                this.preflightMaxAge = Long.parseLong(preflightMaxAge);\n            } else {\n                this.preflightMaxAge = 0L;\n            }\n        } catch (NumberFormatException e) {\n            throw new ServletException(sm.getString(\"corsFilter.invalidPreflightMaxAge\"), e);\n        }\n\n        // For any value other than 'true' this will be false.\n        this.decorateRequest = Boolean.parseBoolean(decorateRequest);\n    }\n\n    /**\n     * Takes a comma separated list and returns a Set&lt;String>.\n     *\n     * @param data A comma separated list of strings.\n     *\n     * @return Set$lt;String>\n     */\n    private Set<String> parseStringToSet(final String data) {\n        String[] splits;\n\n        if (data != null && data.length() > 0) {\n            splits = data.split(\",\");\n        } else {\n            splits = new String[] {};\n        }\n\n        Set<String> set = new HashSet<>();\n        if (splits.length > 0) {\n            for (String split : splits) {\n                set.add(split.trim());\n            }\n        }\n\n        return set;\n    }\n\n\n    /**\n     * Determines if any origin is allowed to make CORS request.\n     *\n     * @return <code>true</code> if it's enabled; false otherwise.\n     */\n    public boolean isAnyOriginAllowed() {\n        return anyOriginAllowed;\n    }\n\n\n    /**\n     * Obtain the headers to expose.\n     *\n     * @return the headers that should be exposed by browser.\n     */\n    public Collection<String> getExposedHeaders() {\n        return exposedHeaders;\n    }\n\n\n    /**\n     * Determines is supports credentials is enabled.\n     *\n     * @return <code>true</code> if the use of credentials is supported otherwise <code>false</code>\n     */\n    public boolean isSupportsCredentials() {\n        return supportsCredentials;\n    }\n\n\n    /**\n     * Returns the preflight response cache time in seconds.\n     *\n     * @return Time to cache in seconds.\n     */\n    public long getPreflightMaxAge() {\n        return preflightMaxAge;\n    }\n\n\n    /**\n     * Returns the {@link Set} of allowed origins that are allowed to make requests.\n     *\n     * @return {@link Set}\n     */\n    public Collection<String> getAllowedOrigins() {\n        return allowedOrigins;\n    }\n\n\n    /**\n     * Returns a {@link Set} of HTTP methods that are allowed to make requests.\n     *\n     * @return {@link Set}\n     */\n    public Collection<String> getAllowedHttpMethods() {\n        return allowedHttpMethods;\n    }\n\n\n    /**\n     * Returns a {@link Set} of headers support by resource.\n     *\n     * @return {@link Set}\n     */\n    public Collection<String> getAllowedHttpHeaders() {\n        return allowedHttpHeaders;\n    }\n\n\n    /**\n     * Should CORS specific attributes be added to the request.\n     *\n     * @return {@code true} if the request should be decorated, otherwise {@code false}\n     */\n    public boolean isDecorateRequest() {\n        return decorateRequest;\n    }\n\n\n    /*\n     * Log objects are not Serializable but this Filter is because it extends GenericFilter. Tomcat won't serialize a\n     * Filter but in case something else does...\n     */\n    private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException {\n        ois.defaultReadObject();\n        log = LogFactory.getLog(CorsFilter.class);\n    }\n\n\n    // -------------------------------------------------- CORS Response Headers\n\n    /**\n     * The Access-Control-Allow-Origin header indicates whether a resource can be shared based by returning the value of\n     * the Origin request header in the response.\n     */\n    public static final String RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN = \"Access-Control-Allow-Origin\";\n\n    /**\n     * The Access-Control-Allow-Credentials header indicates whether the response to request can be exposed when the\n     * omit credentials flag is unset. When part of the response to a preflight request it indicates that the actual\n     * request can include user credentials.\n     */\n    public static final String RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_CREDENTIALS = \"Access-Control-Allow-Credentials\";\n\n    /**\n     * The Access-Control-Expose-Headers header indicates which headers are safe to expose to the API of a CORS API\n     * specification\n     */\n    public static final String RESPONSE_HEADER_ACCESS_CONTROL_EXPOSE_HEADERS = \"Access-Control-Expose-Headers\";\n\n    /**\n     * The Access-Control-Max-Age header indicates how long the results of a preflight request can be cached in a\n     * preflight result cache.\n     */\n    public static final String RESPONSE_HEADER_ACCESS_CONTROL_MAX_AGE = \"Access-Control-Max-Age\";\n\n    /**\n     * The Access-Control-Allow-Methods header indicates, as part of the response to a preflight request, which methods\n     * can be used during the actual request.\n     */\n    public static final String RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_METHODS = \"Access-Control-Allow-Methods\";\n\n    /**\n     * The Access-Control-Allow-Headers header indicates, as part of the response to a preflight request, which header\n     * field names can be used during the actual request.\n     */\n    public static final String RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_HEADERS = \"Access-Control-Allow-Headers\";\n\n    // -------------------------------------------------- CORS Request Headers\n\n    /**\n     * The Origin header indicates where the cross-origin request or preflight request originates from.\n     */\n    public static final String REQUEST_HEADER_ORIGIN = \"Origin\";\n\n    /**\n     * The Access-Control-Request-Method header indicates which method will be used in the actual request as part of the\n     * preflight request.\n     */\n    public static final String REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD = \"Access-Control-Request-Method\";\n\n    /**\n     * The Access-Control-Request-Headers header indicates which headers will be used in the actual request as part of\n     * the preflight request.\n     */\n    public static final String REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS = \"Access-Control-Request-Headers\";\n\n    // ----------------------------------------------------- Request attributes\n    /**\n     * The prefix to a CORS request attribute.\n     */\n    public static final String HTTP_REQUEST_ATTRIBUTE_PREFIX = \"cors.\";\n\n    /**\n     * Attribute that contains the origin of the request.\n     */\n    public static final String HTTP_REQUEST_ATTRIBUTE_ORIGIN = HTTP_REQUEST_ATTRIBUTE_PREFIX + \"request.origin\";\n\n    /**\n     * Boolean value, suggesting if the request is a CORS request or not.\n     */\n    public static final String HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST = HTTP_REQUEST_ATTRIBUTE_PREFIX + \"isCorsRequest\";\n\n    /**\n     * Type of CORS request, of type {@link CORSRequestType}.\n     */\n    public static final String HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE = HTTP_REQUEST_ATTRIBUTE_PREFIX + \"request.type\";\n\n    /**\n     * Request headers sent as 'Access-Control-Request-Headers' header, for pre-flight request.\n     */\n    public static final String HTTP_REQUEST_ATTRIBUTE_REQUEST_HEADERS =\n            HTTP_REQUEST_ATTRIBUTE_PREFIX + \"request.headers\";\n\n    // -------------------------------------------------------------- Constants\n    /**\n     * Enumerates varies types of CORS requests. Also, provides utility methods to determine the request type.\n     */\n    protected enum CORSRequestType {\n        /**\n         * A simple HTTP request, i.e. it shouldn't be pre-flighted.\n         */\n        SIMPLE,\n        /**\n         * An HTTP request that needs to be pre-flighted.\n         */\n        ACTUAL,\n        /**\n         * A pre-flight CORS request, to get meta information, before a non-simple HTTP request is sent.\n         */\n        PRE_FLIGHT,\n        /**\n         * Not a CORS request, but a normal request.\n         */\n        NOT_CORS,\n        /**\n         * An invalid CORS request, i.e. it qualifies to be a CORS request, but fails to be a valid one.\n         */\n        INVALID_CORS\n    }\n\n    /**\n     * {@link Collection} of media type values for the Content-Type header that will be treated as 'simple'. Note\n     * media-type values are compared ignoring parameters and in a case-insensitive manner.\n     *\n     * @see <a href=\"http://www.w3.org/TR/cors/#terminology\" >http://www.w3.org/TR/cors/#terminology</a>\n     */\n    public static final Collection<String> SIMPLE_HTTP_REQUEST_CONTENT_TYPE_VALUES = Collections.unmodifiableSet(\n            new HashSet<>(Arrays.asList(\"application/x-www-form-urlencoded\", \"multipart/form-data\", \"text/plain\")));\n\n    // ------------------------------------------------ Configuration Defaults\n    /**\n     * By default, no origins are allowed to make requests.\n     */\n    public static final String DEFAULT_ALLOWED_ORIGINS = \"\";\n\n    /**\n     * By default, following methods are supported: GET, POST, HEAD and OPTIONS.\n     */\n    public static final String DEFAULT_ALLOWED_HTTP_METHODS = \"GET,POST,HEAD,OPTIONS\";\n\n    /**\n     * By default, time duration to cache pre-flight response is 30 mins.\n     */\n    public static final String DEFAULT_PREFLIGHT_MAXAGE = \"1800\";\n\n    /**\n     * By default, support credentials is disabled.\n     */\n    public static final String DEFAULT_SUPPORTS_CREDENTIALS = \"false\";\n\n    /**\n     * By default, following headers are supported: Origin,Accept,X-Requested-With, Content-Type,\n     * Access-Control-Request-Method, and Access-Control-Request-Headers.\n     */\n    public static final String DEFAULT_ALLOWED_HTTP_HEADERS = \"Origin,Accept,X-Requested-With,Content-Type,\" +\n            \"Access-Control-Request-Method,Access-Control-Request-Headers\";\n\n    /**\n     * By default, none of the headers are exposed in response.\n     */\n    public static final String DEFAULT_EXPOSED_HEADERS = \"\";\n\n    /**\n     * By default, request is decorated with CORS attributes.\n     */\n    public static final String DEFAULT_DECORATE_REQUEST = \"true\";\n\n    // ----------------------------------------Filter Config Init param-name(s)\n    /**\n     * Key to retrieve allowed origins from {@link jakarta.servlet.FilterConfig}.\n     */\n    public static final String PARAM_CORS_ALLOWED_ORIGINS = \"cors.allowed.origins\";\n\n    /**\n     * Key to retrieve support credentials from {@link jakarta.servlet.FilterConfig}.\n     */\n    public static final String PARAM_CORS_SUPPORT_CREDENTIALS = \"cors.support.credentials\";\n\n    /**\n     * Key to retrieve exposed headers from {@link jakarta.servlet.FilterConfig}.\n     */\n    public static final String PARAM_CORS_EXPOSED_HEADERS = \"cors.exposed.headers\";\n\n    /**\n     * Key to retrieve allowed headers from {@link jakarta.servlet.FilterConfig}.\n     */\n    public static final String PARAM_CORS_ALLOWED_HEADERS = \"cors.allowed.headers\";\n\n    /**\n     * Key to retrieve allowed methods from {@link jakarta.servlet.FilterConfig}.\n     */\n    public static final String PARAM_CORS_ALLOWED_METHODS = \"cors.allowed.methods\";\n\n    /**\n     * Key to retrieve preflight max age from {@link jakarta.servlet.FilterConfig}.\n     */\n    public static final String PARAM_CORS_PREFLIGHT_MAXAGE = \"cors.preflight.maxage\";\n\n    /**\n     * Key to determine if request should be decorated.\n     */\n    public static final String PARAM_CORS_REQUEST_DECORATE = \"cors.request.decorate\";\n}\n"{=)(=}C%3A%2FUsers%2FEDY%2FIdeaProjects%2Ftomcat-main