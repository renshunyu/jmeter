"package org.example;\n\nimport java.util.*;\n\npublic class LiKouJieTi {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\");\n    }\n\n    //给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。\n    //你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。\n    //你可以按任意顺序返回答案。\n    //示例 1：\n    //输入：nums = [2,7,11,15], target = 9\n    //输出：[0,1]\n    //解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。\n    //示例 2：\n    //输入：nums = [3,2,4], target = 6\n    //输出：[1,2]\n    //示例 3：\n    //输入：nums = [3,3], target = 6\n    //输出：[0,1]\n    public static int[] twoSum(int[] nums, int target) {\n        int[] result = new int[2];\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[i] + nums[j] == target) {\n                    result[0] = i;\n                    result[1] = j;\n                    return result;\n                }\n            }\n        }\n        return result;\n    }\n\n    //给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。你可以按任意顺序返回答案。\n    //示例 1：\n    //输入：nums = [2,7,11,15], target = 9\n    //输出：[0,1]\n    //解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。\n    //示例 2：\n    //输入：nums = [3,2,4], target = 6\n    //输出：[1,2]\n    //示例 3：\n    //输入：nums = [3,3], target = 6\n    //输出：[0,1]\n    public static int[] twoSum2(int[] nums, int target) {\n        int[] result = new int[2];\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[i] + nums[j] == target) {\n                    result[0] = i;\n                    result[1] = j;\n                    return result;\n                }\n            }\n        }\n        return result;\n    }\n\n    //给你一个字符串数组，请你将 字母异位词 组合在一起。可以按任意顺序返回结果列表。\n    //字母异位词 是由重新排列源单词的所有字母得到的一个新单词。\n    //示例 1:\n    //输入: strs = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]\n    //输出: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n    //示例 2:\n    //输入: strs = [\"\"]\n    //输出: [[\"\"]]\n    //示例 3:\n    //输入: strs = [\"a\"]\n    //输出: [[\"a\"]]\n    public static List<List<String>> groupAnagrams(String[] strs) {\n        List<List<String>> result = new ArrayList<>();\n        Map<String, List<String>> map = new HashMap<>();\n        for (String str : strs) {\n            char[] chars = str.toCharArray();\n            Arrays.sort(chars);\n            String key = String.valueOf(chars);\n            if (map.containsKey(key)) {\n                map.get(key).add(str);\n            } else {\n                List<String> list = new ArrayList<>();\n                list.add(str);\n                map.put(key, list);\n            }\n        }\n        for (Map.Entry<String, List<String>> entry : map.entrySet()) {\n            result.add(entry.getValue());\n        }\n        return result;\n    }\n\n    //求字符串的最长回文字串\n    //给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。\n    //示例 1:\n    //输入: s = \"abcabcbb\"\n    //输出: 3\n    //解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。\n    //示例 2:\n    //输入: s = \"bbbbb\"\n    //输出: 1\n    //解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。\n    //示例 3:\n    //输入: s = \"pwwkew\"\n    //输出: 3\n    //解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\n    //     请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。\n    public static int lengthOfLongestSubstring(String s) {\n        int result = 0;\n        int left = 0;\n        int right = 0;\n        Map<Character, Integer> map = new HashMap<>();\n        while (right < s.length()) {\n            if (map.containsKey(s.charAt(right))) {\n                left = Math.max(left, map.get(s.charAt(right)) + 1);\n            }\n            map.put(s.charAt(right), right);\n            result = Math.max(result, right - left + 1);\n            right++;\n        }\n        return result;\n    }\n\n    //给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。\n    //示例 1:\n    //输入: s = \"abcabcbb\"\n    //输出: 3\n    //解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。\n    //示例 2:\n    //输入: s = \"bbbbb\"\n    //输出: 1\n    //解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。\n    //示例 3:\n    //输入: s = \"pwwkew\"\n    //输出: 3\n    //解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\n    //     请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。\n    public static int lengthOfLongestSubstring2(String s) {\n        int result = 0;\n        int left = 0;\n        int right = 0;\n        Set<Character> set = new HashSet<>();\n        while (right < s.length()) {\n            if (set.contains(s.charAt(right))) {\n                left = Math.max(left, set.size() + 1);\n            }\n            set.add(s.charAt(right));\n            result = Math.max(result, right - left + 1);\n            right++;\n        }\n        return result;\n    }\n\n    //给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。\n    //示例 1:\n    //输入: s = \"abcabcbb\"\n    //输出: 3\n    //解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。\n    //示例 2:\n    //输入: s = \"bbbbb\"\n    //输出: 1\n    //解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。\n    //示例 3:\n    //输入: s = \"pwwkew\"\n    //输出: 3\n    //解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\n    //     请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。\n    public static int lengthOfLongestSubstring3(String s) {\n        int result = 0;\n        int left = 0;\n        int right = 0;\n        int[] map = new int[128];\n        while (right < s.length()) {\n            if (map[s.charAt(right)] != 0) {\n                left = Math.max(left, map[s.charAt(right)] + 1);\n            }\n            map[s.charAt(right)] = right;\n            result = Math.max(result, right - left + 1);\n            right++;\n        }\n        return result;\n    }\n\n    //给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。\n    //示例 1:\n    //输入: s = \"abcabcbb\"\n    //输出: 3\n    //解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。\n    //示例 2:\n    //输入: s = \"bbbbb\"\n    //输出: 1\n    //解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。\n    //示例 3:\n    //输入: s = \"pwwkew\"\n    //输出: 3\n    //解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\n    //     请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。\n    public static int lengthOfLongestSubstring4(String s) {\n        int result = 0;\n        int left = 0;\n        int right = 0;\n        int[] map = new int[128];\n        while (right < s.length()) {\n            if (map[s.charAt(right)] != 0) {\n                left = Math.max(left, map[s.charAt(right)] + 1);\n            }\n\n\n            map[s.charAt(right)] = right;\n            result = Math.max(result, right - left + 1);\n            right++;\n        }\n        return result;\n    }\n\n    //给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。\n    //示例 1:\n    //输入: s = \"abcabcbb\"\n    //输出: 3\n    //解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。\n    //示例 2:\n    //输入: s = \"bbbbb\"\n    //输出: 1\n    //解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。\n    //示例 3:\n    //输入: s = \"pwwkew\"\n    //输出: 3\n    //解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\n    //     请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。\n    public static int lengthOfLongestSubstring5(String s) {\n        int result = 0;\n\n        int left = 0;\n        int right = 0;\n        int[] map = new int[128];\n        while (right < s.length()) {\n            if (map[s.charAt(right)] != 0) {\n                left = Math.max(left, map[s.charAt(right)] + 1);\n            }\n            map[s.charAt(right)] = right;\n            result = Math.max(result, right - left + 1);\n            right++;\n        }\n\n        return result;\n    }\n    ////给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。\n    //示例 1:\n    //输入: s = \"abcabcbb\"\n    //输出: 3\n    //解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。\n    //示例 2:\n    //输入: s = \"bbbbb\"\n    //输出: 1\n    //解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。\n    //示例 3:\n    //输入: s = \"pwwkew\"\n    //输出: 3\n    //解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\n    //     请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。\n    public static int lengthOfLongestSubstring6(String s) {\n        int result = 0;\n        int left = 0;\n        int right = 0;\n        int[] map = new int[128];\n        while (right < s.length()) {\n            if (map[s.charAt(right)] != 0) {\n                left = Math.max(left, map[s.charAt(right)] + 1);\n            }\n            map[s.charAt(right)] = right;\n            result = Math.max(result, right - left + 1);\n            right++;\n        }\n        return result;\n    }\n\n    public static int lengthOfLongestSubstring7(String s) {\n        int result = 0;\n        int left = 0;\n        int right = 0;\n        int[] map = new int[128];\n        while (right < s.length()) {\n            if (map[s.charAt(right)] != 0) {\n                left = Math.max(left, map[s.charAt(right)] + 1);\n            }\n            map[s.charAt(right)] = right;\n            result = Math.max(result, right - left + 1);\n            right++;\n        }\n        return result;\n    }\n    public static int lengthOfLongestSubstring8(String s) {\n        int result = 0;\n        int left = 0;\n        int right = 0;\n        int[] map = new int[128];\n        while (right < s.length()) {\n            if (map[s.charAt(right)] != 0) {\n                left = Math.max(left, map[s.charAt(right)] + 1);\n            }\n            map[s.charAt(right)] = right;\n            result = Math.max(result, right - left + 1);\n            right++;\n        }\n        return result;\n    }\n    public static int lengthOfLongestSubstring9(String s) {\n        int result = 0;\n        int left = 0;\n        int right = 0;\n        int[] map = new int[128];\n        while (right < s.length()) {\n            if (map[s.charAt(right)] != 0) {\n                left = Math.max(left, map[s.charAt(right)] + 1);\n            }\n            map[s.charAt(right)] = right;\n            result = Math.max(result, right - left + 1);\n            right++;\n        }\n        return result;\n    }\n    public static int lengthOfLongestSubstring10(String s) {\n        int result = 0;\n        int left = 0;\n        int right = 0;\n        int[] map = new int[128];\n        while (right < s.length()) {\n            if (map[s.charAt(right)] != 0) {\n                left = Math.max(left, map[s.charAt(right)] + 1);\n            }\n            map[s.charAt(right)] = right;\n            result = Math.max(result, right - left + 1);\n            right++;\n        }\n        return result;\n    }\n    public static int lengthOfLongestSubstring11(String s) {\n        int result = 0;\n        int left = 0;\n        int right = 0;\n        int[] map = new int[128];\n        while (right < s.length()) {\n            if (map[s.charAt(right)] != 0) {\n                left = Math.max(left, map[s.charAt(right)] + 1);\n            }\n            map[s.charAt(right)] = right;\n            result = Math.max(result, right - left + 1);\n            right++;\n        }\n        return result;\n    }\n\n    public static int lengthOfLongestSubstring12(String s) {\n        int result = 0;\n        int left = 0;\n        int right = 0;\n        int[] map = new int[128];\n        while (right < s.length()) {\n            if (map[s.charAt(right)] != 0) {\n                left = Math.max(left, map[s.charAt(right)] + 1);\n            }\n            map[s.charAt(right)] = right;\n            result = Math.max(result, right - left + 1);\n            right++;\n        }\n        return result;\n    }\n    public static int lengthOfLongestSubstring13(String s) {\n        int result = 0;\n        int left = 0;\n        int right = 0;\n        int[] map = new int[128];\n        while (right < s.length()) {\n            if (map[s.charAt(right)] != 0) {\n                left = Math.max(left, map[s.charAt(right)] + 1);\n            }\n            map[s.charAt(right)] = right;\n            result = Math.max(result, right - left + 1);\n            right++;\n        }\n        return result;\n    }\n    public static int lengthOfLongestSubstring14(String s) {\n        int result = 0;\n        int left = 0;\n        int right = 0;\n        int[] map = new int[128];\n        while (right < s.length()) {\n            if (map[s.charAt(right)] != 0) {\n                left = Math.max(left, map[s.charAt(right)] + 1);\n            }\n            map[s.charAt(right)] = right;\n            result = Math.max(result, right - left + 1);\n            right++;\n        }\n        return result;\n    }\n    public static int lengthOfLongestSubstring15(String s){\n        int result = 0;\n        int left = 0;\n        int right = 0;\n        int[] map = new int[128];\n        while (right < s.length()) {\n            if (map[s.charAt(right)] != 0) {\n                left = Math.max(left, map[s.charAt(right)] + 1);\n            }\n            map[s.charAt(right)] = right;\n            result = Math.max(result, right - left + 1);\n            right++;\n        }\n        return result;\n    }\n    public static int lengthOfLongestSubstring16(String s){\n        int result = 0;\n        int left = 0;\n        int right = 0;\n        int[] map = new int[128];\n        while (right < s.length()) {\n            if (map[s.charAt(right)] != 0) {\n                left = Math.max(left, map[s.charAt(right)] + 1);\n            }\n            map[s.charAt(right)] = right;\n            result = Math.max(result, right - left + 1);\n            right++;\n        }\n        return result;\n    }\n    public static int lengthOfLongestSubstring17(String s){\n        int result = 0;\n        int left = 0;\n        int right = 0;\n        int[] map = new int[128];\n        while (right < s.length()) {\n            if (map[s.charAt(right)] != 0) {\n                left = Math.max(left, map[s.charAt(right)] + 1);\n            }\n            map[s.charAt(right)] = right;\n            result = Math.max(result, right - left + 1);\n            right++;\n        }\n        return result;\n    }\n    "{=)(=}"\n\n\n\n\n}"{=)(=}C%3A%2FUsers%2FEDY%2FIdeaProjects%2FEurope